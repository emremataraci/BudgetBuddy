// Swift Development Guidelines
const swiftGuidelines = {
  // Architecture & State Management
  architecture: {
    pattern: "MVVM with clean architecture",
    stateManagement: "SwiftUI + Combine for state management",
    dependencyInjection: "Property wrappers + Environment",
    routing: "NavigationStack",
    errorHandling: "Result type for functional error handling",
  },

  // Project Structure
  projectStructure: `
  BudgetBuddy/
    ├── App/          # App delegate, configuration
    ├── Core/         # Services (Supabase, Analytics, Theme)
    ├── Features/     # Feature modules (Home, Profile, Goals)
    │   ├── ViewModels/  # State management
    │   ├── Models/      # Feature models
    │   ├── Services/    # Business logic
    │   └── Views/       # UI components
    └── Domain/       # Shared models, utilities
  `,

  // Technical Standards
  standards: {
    storage: {
      local: "UserDefaults or CoreData",
      caching: "NSCache for memory management",
    },
    testing: {
      framework: "XCTest",
      mocking: "Protocol-based mocking",
    },
    localization: {
      tools: ["Localizable.strings", "SwiftGen"],
      format: "Structured string resources",
    },
    theming: {
      source: "AppTheme for colors and text styles",
      darkMode: [
        "Test all UI components in both themes",
        "Use Color assets from Asset catalog",
        "Check contrast ratios in both modes",
        "Verify text selection colors",
      ],
      usage: "Color+Extensions instead of hard-coded colors",
    }
  },

  // Development Workflow
  workflow: [
    "SwiftUI previews for rapid development",
    "SwiftLint for code style enforcement",
    "Environment-based development (dev/prod)",
  ],

  // Best Practices
  bestPractices: [
    "Stateless views for UI-only components",
    "Final classes when inheritance not needed",
    "Files under 300 lines",
    "Proper error handling and logging",
    "Lazy loading for heavy components",
    "SwiftUI design guidelines",
    "Theme-aware components using Environment",
  ],

  // Quality Assurance
  qualityAssurance: {
    review: [
      "Test in both light/dark themes",
      "Verify responsive layouts",
      "Check accessibility standards",
      "Validate theme consistency",
    ],
    documentation: [
      "Reference PROJECT.md for implementations",
      "Keep project_progress.md up to date",
      "Document theme usage patterns",
      "Update changelog",
    ]
  },

  // Project Progress Documentation
  projectProgress: {
    sections: [
      "Current sprint status",
      "Completed features",
      "Known issues",
    ],
    updateGuidelines: [
      "Update at the end of each working session",
      "Update after every major feature completion",
      "Keep entries concise and dated",
      "Highlight blocking issues",
    ],
  },

  // Commit Message Guidelines
  commitFormat: {
    pattern: "<type>: <description>",
    types: {
      feat: "A new feature",
      fix: "A bug fix",
      docs: "Documentation only changes",
      style: "Changes not affecting code meaning (whitespace, formatting)",
      refactor: "Code change that neither fixes a bug nor adds a feature",
      test: "Adding missing tests or correcting existing tests",
      chore: "Changes to build process or auxiliary tools",
    },
    descriptionRules: [
      "Keep it short (4-5 words)",
      "Use present tense",
      "No capitalization at start",
      "No period at end",
    ],
    examples: [
      "feat: add expense tracking flow",
      "fix: resolve crash in budget calculation",
      "docs: update readme installation",
      "style: format budget service",
    ]
  }
}; 